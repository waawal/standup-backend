// Generated by CoffeeScript 1.6.3
var conf_name, conf_room, hash, params, q, query_str, send_join, send_msg, send_set, sock, srv_loc;

hash = function(pairs) {
  var key, value, _i, _len, _ref;
  hash = {};
  for (_i = 0, _len = pairs.length; _i < _len; _i++) {
    _ref = pairs[_i], key = _ref[0], value = _ref[1];
    hash[key] = value;
  }
  return hash;
};

query_str = location.search.substr(1).split('&');

params = hash((function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = query_str.length; _i < _len; _i++) {
    q = query_str[_i];
    _results.push(q.split('='));
  }
  return _results;
})());

conf_name = hash['name'] || 'anonymous';

conf_room = hash['room'] || 'default';

send_msg = function(sock, msg, data) {
  var o;
  o = {
    msg: msg
  };
  o = _.defaults(o, data);
  msg = JSON.stringify(o);
  return sock.send(msg);
};

send_join = function(sock, room, name) {
  return send_msg(sock, 'join', {
    room: room,
    name: name
  });
};

send_set = function(sock, time, duration, state) {
  return send_msg(sock, 'set', {
    time: time,
    duration: duration,
    state: state
  });
};

srv_loc = window.location.href.split('/');

srv_loc = srv_loc[0] + '//' + srv_loc[2] + '/' + 'sock';

sock = new SockJS(srv_loc);

sock.onopen = function(conn) {
  console.log('open:', sock.protocol);
  return send_join(sock, conf_room, conf_name);
};

sock.onmessage = function(message) {
  var duration, error, o, state;
  try {
    o = JSON.parse(message.data);
    if (o.msg === 'join') {
      console.log(o.name + ' joins the standup');
      return send_set(sock, new Date().getTime(), duration = 900, state = 'paused');
    } else if (o.msg === 'set') {
      return console.log('receive set: time=' + o.time + ' duration=' + o.duration + ' state=' + o.state);
    }
  } catch (_error) {
    error = _error;
    return console.log('error:', error, 'message:', message.data);
  }
};

sock.onclose = function() {
  return console.log('close');
};
